# -*- coding: utf-8 -*-
"""Function.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kcvqq7W2zrfE5PLqsA_CyGuRnbcmztcK
"""

def calculate(x): #fonksiyonun gövdesi, body
  print(x*2)

calculate(2)

def sum(x,y): #iki argumanlı
  print(x+y)

sum(3,8)

def  func(*args): #*args kullanımı birden fazla value almamızı sağlar
  total=0
  for i in args:
    total +=i
    print(total)

func(1,2,3,4,5)

# def function_name(parameters/arguments):
#     statement (functions body)

def say_hi(string):
  print(string)
  print("Merhaba")
  print("Hello")

say_hi("Miuul")

def two_sum(*arg):
  total = 0
  for i in arg:
    total += i
  print(total)

two_sum(1,2)

list = [] #global

def list_func(*arg):
  #buraya veya for döngüsü icerisine bir degisken tanimlasaydik local degisken olacaktı.
  for i in arg:
    list.append(i)
  print(list)

list_func(2,3,4,5,6)

list

"""# **Ön Tanımlı Argumanlar / Parametreler**
# **(Default Parameters/Arguments)**
"""

def  divide(a,b=1): #On tanimli olması sayesinde, bir bir parametreyi eksik girsek bile program hata vermeyecek ve calisir durumda olacaktir.
  print(a/b)

divide(10) #b yi yazmayi unuttuk diyelim
divide(10,5)

def say_smthng(string = "Fonksiyona tanımlı default bir string var :)"):
  print(string)
  print("Merhaba")
  print("Hello")

say_smthng()

say_smthng("Kendim string tanimladim :)")

"""Fonksiyon Yazma İhtiyacı"""

#warm, moisture, charge
#tek tek işlem yapmak yerine tek bir fonksiyonla bu ihtiyacımızı kolaylaştırabiliriz.
#DRY
def funcc(warm, moisture, charge):
  print((warm+moisture)/charge)


type(funcc(40,23,12))

def funcc2(warm, moisture, charge): #return ile islem degeri dondurulur ve nontype olmaktan cikar.
  return((warm+moisture)/charge)


funcc2(23,22,12) * 10

type(funcc2(23,22,12))

def funcc3(warm, moisture, charge): #return ile birden fazla deger dondurulebilir.
  warm = warm *2
  moisture = moisture *2
  charge = charge *2
  output = (warm+moisture)/charge
  return warm, moisture, charge, output

  
funcc3(34,28,3)

"""# **Foksiyon İçinden Fonksiyon Çağırmak**"""

def sum(a,b,c):
  return int(a + b + c)

def any_cal(x, y):
  return x * 10 + 100 / y - x * 3

any_cal(2,3)

def union_fun(a,b,c,y): #ic ice cagirilmis fonksiyonlar
  x = sum(a,b,c)
  z = any_cal(x,y)
  print(z * 10)


union_fun(2,3,4,5)

"""# **Global & Local Değişkenler**"""

#Yukarıdaki ilk örneklerde de belirttigim gibi fonksiyon disina yazilan degiskenler global icine yazilanlar ise local :)
list = [1,2,3] # list global

def list_func(*arg):
  list2 = [4,5,6] # list2 local
  for i in arg:
    a = i+2 # a local bir degisken
    list.append(a)
    list2.append(a)
  print(list)
  print(list2)

list_func(9,8,7,6) #iki degiskene de ekleme yapti